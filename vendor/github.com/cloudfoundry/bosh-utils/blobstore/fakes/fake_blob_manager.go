// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry/bosh-utils/blobstore"
	"github.com/cloudfoundry/bosh-utils/system"
)

type FakeBlobManagerInterface struct {
	FetchStub        func(blobID string) (file system.File, err error, status int)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		blobID string
	}
	fetchReturns struct {
		result1 system.File
		result2 error
		result3 int
	}
	WriteStub        func(blobID string, reader io.Reader) (err error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		blobID string
		reader io.Reader
	}
	writeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobManagerInterface) Fetch(blobID string) (file system.File, err error, status int) {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		blobID string
	}{blobID})
	fake.recordInvocation("Fetch", []interface{}{blobID})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(blobID)
	} else {
		return fake.fetchReturns.result1, fake.fetchReturns.result2, fake.fetchReturns.result3
	}
}

func (fake *FakeBlobManagerInterface) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeBlobManagerInterface) FetchArgsForCall(i int) string {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].blobID
}

func (fake *FakeBlobManagerInterface) FetchReturns(result1 system.File, result2 error, result3 int) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 system.File
		result2 error
		result3 int
	}{result1, result2, result3}
}

func (fake *FakeBlobManagerInterface) Write(blobID string, reader io.Reader) (err error) {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		blobID string
		reader io.Reader
	}{blobID, reader})
	fake.recordInvocation("Write", []interface{}{blobID, reader})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(blobID, reader)
	} else {
		return fake.writeReturns.result1
	}
}

func (fake *FakeBlobManagerInterface) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeBlobManagerInterface) WriteArgsForCall(i int) (string, io.Reader) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].blobID, fake.writeArgsForCall[i].reader
}

func (fake *FakeBlobManagerInterface) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobManagerInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBlobManagerInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blobstore.BlobManagerInterface = new(FakeBlobManagerInterface)
